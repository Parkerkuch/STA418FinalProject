---
title: "Final Project Activity 1"
author: "Parker Kuchulan & Bradley Monarch"
date: "`r format(Sys.Date(), '%m/%d/%Y')`"
output: pdf_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, error = TRUE, eval = TRUE,
                      message = FALSE, warning = FALSE)
```

```{r Importing Packages}
library(tidyverse)
library(lubridate)
library(skimr)
library(tigris)
library(sf)
library(leaflet)
library(flextable)
```


## Import Data

```{r Importing Data}
#GunData
gunData <- data.table::fread("gunViolenceFull.csv")

#CensusData
censusData <- data.table::fread('https://raw.githubusercontent.com/dilernia/STA418-518/main/Data/census_data_2008-2021.csv')
```

### EDA

```{r Exploring Data}
#summary(gunData)
#glimpse(gunData)
#skim(gunData)
```

### Summary Stats

```{r nkilled summary}
#Summary statistics for number of people killed
gunData %>% pull(n_killed) %>% summary()
```

```{r ninjured summary}
#Summary statistics for number of people injured
gunData %>% pull(n_injured) %>% summary()
```

## Data Cleaning
```{r Creating vars for type of incident}
stateCount <- gunData %>% mutate(fatal = n_killed > 0) %>% 
  mutate(type_harm = ifelse(fatal == FALSE & n_injured == 0, "Unharmed", 
                       ifelse(fatal ==  TRUE, "Killed", "Injured")))
```


```{r Data Cleaning}
#New dataset for properly formated dates
gunDataT <- stateCount %>% mutate(year = lubridate::year(date)) 

#Remove years with incomplete data
gunDataF <- gunDataT %>% filter(year != 2013 & year != 2018)

#Extracting Year
gunDataF <- gunDataF %>% mutate(month = lubridate::month(date))
gunDataF <- gunDataF %>% mutate(month_name = month(date, label = TRUE))

gunDataF2 <- gunDataF %>% select(date, year, month_name, state, city_or_county, n_killed, n_injured, incident_characteristics, participant_age_group, participant_gender, participant_type, type_harm)

#df for state num sums
stateGun <- gunDataF2 %>% select(year, state, type_harm)

#tidying new df for state num sums
#Creating df with binary 1 or 0 based on type of incident
stateGun2 <- stateGun %>% group_by(state, year) %>% 
  mutate(
    injured = case_when(
      type_harm == "Injured" ~ 1,
      TRUE ~ 0
    ),
    killed = case_when(
      type_harm == "Killed" ~ 1,
      TRUE ~ 0
    ),
    unharmed = case_when(
      type_harm == "Unharmed" ~ 1,
      TRUE ~ 0
    ) 
  ) %>% summarize(totalInjured = sum(injured), totalKilled = sum(killed), totalUnharmed = sum(unharmed), totalIncidents = totalInjured + totalKilled + totalUnharmed)

#Creating a df with numerical sums by state                                                
stateGunSums <- stateGun2 %>% 
  group_by(state, year) %>% 
  summarize(totalIncidents = totalIncidents, 
propFatal = round(totalKilled/totalIncidents, 3), 
propInjured = round(totalInjured/totalIncidents, 3), 
propUnharmed = round(totalUnharmed/totalIncidents, 3))

stateFatalAvg2017 <- stateGunSums %>% group_by(state) %>% filter(year == 2017) %>% 
  summarize(totalIncidents = totalIncidents, propFatal = propFatal)



#Creating new vars for state and county in census data
censusDataF <- censusData %>% separate(col = county_state, into = c("county", "state"), sep = ",")

#census data has space in front of each state, so start character at 2
# remove the first character (space) from the strings column (stringr)
censusDataF <- censusDataF %>% mutate(state = str_sub(state, start = 2))

census2017 <- censusDataF %>% filter(year == 2017)
census2017Pop <- census2017 %>% group_by(state) %>% summarize(totalPopulation = sum(population))
census2017Pop <- census2017Pop %>% drop_na()


gunStateFatal2017 <- stateFatalAvg2017 %>% left_join(census2017Pop, by = 'state')


#Making df with just state metrics for census data 2017
censusDataStates <- censusDataF %>% filter(is.na(state) == TRUE) %>% select(-state) %>% rename(state = county) %>% filter(year > 2013 & year < 2018)

censusDataStates2017 <- censusDataStates %>% filter(year == 2017, state != "Puerto Rico")

```

```{r New df with state death totals}
stateVictims <- gunData %>%
  group_by(state) %>% 
  summarize(totalKilled = sum(n_killed), totalInjured = sum(n_injured))
```


## Creating Tables
```{r Table for top 10 states in 2017 with highest median poverty rate and listed median income and pop}
top10MedPov <- censusDataStates2017 %>% select(state, prop_poverty, population, median_income) %>% arrange(desc(prop_poverty)) %>% 
  slice_head(n = 10)
 
top10MedPovTable <- flextable(top10MedPov) 

top10MedPovTable %>% set_header_labels(state = "State", prop_poverty = "Proportion Poverty", population = "Population", median_income = "Median Income") %>% set_caption("Table 1: Top 10 States with Highest Median Poverty Rate")


```

```{r Table for top 10 most diverse states}
censusDataStates2017 <- censusDataStates2017 %>% mutate(prop_diverse = 1 - prop_white)

top10MostDiverse <- censusDataStates2017 %>% select(state, population, prop_diverse) %>% 
  arrange(-prop_diverse) %>% 
  slice_head(n = 10)

top10MostDiverseTable <- flextable(top10MostDiverse)


top10MostDiverseTable %>% set_header_labels(state = "State", prop_diverse = "Proportion Diverse", population = "Population") %>% set_caption("Table 2: Top 10 Most Diverse States in the US (2017)")
```



## Creating a GGplot visualization of a bar chart with the highest proportion of incidents resulting in fatalities

```{r 10 Highest props of incidents that resulted in fataities} 
stateFatalAvg2017 %>% arrange(desc(propFatal)) %>%
  slice_head(n = 10) %>% 
  ggplot(aes(x = reorder(state, +propFatal), y = propFatal)) +
  geom_col(fill = "#800020", color = "black") + 
  theme_bw() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1, face = "bold", size = 10), 
        legend.position = "none") +
  labs(title = "States with Highest Proportion of Gun Violence Incidents Resulting in Fatalities (2014-2017)", x = "State", y = "Proportion of Fatalities", caption = "Data Source: Gun Violence Archive (GVA)")
```

## New Dataframe with Monthly Death Totals
```{r New df with monthly death totals}
monthVictims <- gunDataF %>%
  group_by(month_name, year) %>% 
  summarize(totalKilled = sum(n_killed), totalInjured = sum(n_injured))
```

```{r}
#Turn year variable into factor type
monthVictims$year <- as.character(monthVictims$year)
```



## Num People Killed by Month 
```{r GGPlot Num People Killed by month}
#Number of people killed in shootings by month per year
monthVictims %>% ggplot(aes(x = month_name,
                        y = totalKilled,
                        color = year,
                        group = year)) + 
  geom_line() +
  labs(title = "Number of People Killed in Shootings Each Month per Year",
       x = "Month",
       y = "Total people killed",
       caption = "Data source: Gun Violence Archive (GVA)",
       color = "Year") + 
  theme_bw() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1, face = "bold", size = 8)) +
  scale_y_continuous(labels = scales::comma, expand = expansion(mult = c(0,0.1))) +
  ylim(0,NA)
```


## Fetching and Importing State Shape Data

```{r }
state_shape <- tigris::states(cb = TRUE, year = 2021)
```

```{r Merging shape data with gunFatal data}
gunCensusFatal2017 <- gunStateFatal2017 %>% left_join(state_shape,
                                             by = c('state' = 'NAME'))
```



## Creating choropleth map for gun incidents per 100,000 people
```{r Choropleth map gun incidents per 100,000 people}
# Create new metric for gun incidents per 100,000 people
gunCensusFatal2017 <- gunCensusFatal2017 %>% mutate(newPop = totalPopulation / 100000)
ggMapData <- gunCensusFatal2017 %>% mutate(normalizedInc = totalIncidents / newPop)

# Convert ggMapData to sf object
ggMapData_sf <- st_as_sf(ggMapData)

# Fixing issue with Alaska and Hawaii
ggMapDataFix <- ggMapData_sf %>%
  tigris::shift_geometry()


# Plot it
incidentGG <- ggMapDataFix %>%
  ggplot(aes(fill = normalizedInc)) +
  geom_sf() +
  scale_fill_gradient(low = "white", high = "dodgerblue") +
  labs(title = "Gun incidents per 100,000 People by State, 2017", fill = "Gun Incidents per 100,000 people") +
  theme_void()

incidentGG
```

## Creating Data Dictionary
```{r Data Dictionary}
# Creating data dictionary. 
dataDictionary <- tibble(Variable = colnames(gunDataT),
                         Description = c("gunviolencearchive.org ID for incident",
                                         "date of occurrence",
                                         "state",
                                         "city or county",
                                         "address where incident took place",
                                         "number of people killed",
                                         "number of people injured",
                                         "link to gunviolencearchive.org webpage containing details of incident",
                                         "link to online news story concerning incident",
                                         "ignore, always False",
                                         "Congressional district",
                                         "gun stolen or not, e.g. 'Unknown' or 'Stolen'",
                                         "description of gun type",
                                         "list of incident characteristics",
                                         "latitude of location",
                                         "description of location where incident took place",
                                         "longitude of location",
                                         "number of guns involved",
                                         "additional notes about the incident",
                                         "participant age",
                                         "participant description of age group, e.g. 'Adult 18+'",
                                         "participant gender being 'Male' or 'Female'",
                                         "participant name",
                                         "relationship of participant to other participants",
                                         "outcome, one of 'Arrested', 'Killed', 'Injured', or 'Unharmed'",
                                         "participant category being 'Victim' or 'Subject-Suspect'",
                                         "links to online news stories concerning incident",
                                         "state house district",
                                         "state senate district",
                                         "full address", "whether the victim was killed or not", "whether the victim was killed or not as a string", "the year of the incident"),
                         Type = map_chr(gunDataT, .f = function(x){typeof(x)[1]}),
                         Class = map_chr(gunDataT, .f = function(x){class(x)[1]}))
```


```{r Initializing Dict}
#Initialize dictionary
flextable::flextable(dataDictionary, cwidth = 2)
```


